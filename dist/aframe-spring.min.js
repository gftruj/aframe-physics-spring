!function(){"use strict";if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before a-frame was available");if("undefined"==typeof CANNON)throw new Error("Component attempted to register before the a-frame physics system was available");AFRAME.registerComponent("spring",{multiple:!0,schema:{target:{type:"selector"},restLength:{default:1,min:0},stiffness:{default:100,min:0,max:0},damping:{default:1,min:0,max:1}},init:function(){this.system=this.el.sceneEl.systems.physics,this.world=this.system.driver.world,this.spring=null},update:function(t,e){var i=this.el,s=this.data;i.body&&s.target.body?(this.createSpring(),this.updateSpring(t)):(i.body?s.target:i).addEventListener("body-loaded",this.update.bind(this,{}))},updateSpring:function(t){if(this.spring){var e=this.data,i=this.spring;e.target?Object.keys(e).forEach(function(s){if(e[s]!==t[s]){if("target"===s)return void(i.bodyB=e.target.body);i[s]=e[s]}}):console.warn("Invalid target specified. No changes made.")}else console.warn("Component attempted to change spring before its created. No changes made.")},createSpring:function(){if(!this.spring){var t=this.data;this.dataIsValid(t)&&(this.spring=new CANNON.Spring(this.el.body,t.target.body,{restLength:t.restLength,stiffness:t.stiffness,damping:t.damping}),this.world.addEventListener("postStep",this.updateSpringForce.bind(this,{})))}},updateSpringForce:function(){this.spring&&this.spring.applyForce()},dataIsValid:function(t){return!!t.target},play:function(){this.world.addEventListener("postStep",this.updateSpringForce.bind(this,{}))},pause:function(){this.world.removeEventListener("postStep",this.updateSpringForce.bind(this,{}))},remove:function(){this.world.removeEventListener("postStep",this.updateSpringForce.bind(this,{})),this.spring&&delete this.spring,this.spring=null}})}();
//# sourceMappingURL=aframe-spring.min.js.map
