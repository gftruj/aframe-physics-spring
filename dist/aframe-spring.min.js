!function(){"use strict";if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");if("undefined"==typeof CANNON)throw new Error("Component attempted to register before Cannon.js was available.");AFRAME.registerComponent("spring",{schema:{target:{type:"selector"},restLength:{default:1},stiffness:{default:100},damping:{default:1}},dependencies:["physics"],multiple:!0,init:function(){this.system=this.el.sceneEl.systems.physics,this.world=this.system.driver.world,this.spring=null},update:function(t,e){var i=this.el,s=this.data;i.body&&s.target.body?(this.createSpring(),this.updateSpring(t)):(i.body?s.target:i).addEventListener("body-loaded",this.update.bind(this,{}))},updateSpring:function(t){let e=this.data;this.spring?e.target?Object.keys(e).forEach(i=>{if(e[i]!==t[i]){if("target"===i)return void(this.spring.bodyB=e.target.body);this.spring[i]=e[i]}}):console.warn("Invalid target specified. No changes made."):console.warn("Component attempted to change spring before its created. No changes made.")},createSpring:function(){let t=this.data;this.dataIsValid(t)&&(this.spring=new CANNON.Spring(this.el.body,t.target.body,{restLength:t.restLength,stiffness:100,damping:1}),this.world.addEventListener("postStep",this.updateSpringForce.bind(this,{})))},updateSpringForce:function(){this.spring&&this.spring.applyForce()},dataIsValid:function(t){return!!t.target},play:function(){this.world.addEventListener("postStep",this.updateSpringForce.bind(this,{}))},pause:function(){this.world.removeEventListener("postStep",this.updateSpringForce.bind(this,{}))},remove:function(){this.world.removeEventListener("postStep",this.updateSpringForce.bind(this,{})),this.spring&&delete this.spring,this.spring=null}})}();
//# sourceMappingURL=aframe-spring.min.js.map
