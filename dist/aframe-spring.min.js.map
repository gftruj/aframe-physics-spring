{"version":3,"file":"aframe-spring.min.js","sources":["../src/spring.js"],"sourcesContent":["if (typeof AFRAME === 'undefined') {\n\tthrow new Error('Component attempted to register before a-frame was available');\n}\n\nif (typeof CANNON === 'undefined') {\n\tthrow new Error('Component attempted to register before the a-frame physics system was available');\n}\n\nAFRAME.registerComponent(\"spring\", {\n\n  multiple: true,\n\n  schema: {\n\n    // Target (other) body for the constraint.\n    target: {type: 'selector'},\n\n    // Lenght of the spring, when no force acts upon it\n    restLength: {default: 1, min: 0},\n\n    // how much will the spring suppress the force\n    stiffness: {default: 100, min: 0, max: 0},\n\n    // the stretch factor of the spring\n    damping: {default: 1, min: 0, max: 1},\n  },\n\n  init: function() {\n    this.system = this.el.sceneEl.systems.physics\n    this.world = this.system.driver.world\n    this.spring = /* {CANNON.Constraint} */ null\n  },\n\n  update: function(oldData, newData) {\n    var el = this.el,\n    data = this.data;\n    \n    // wait until the CANNON body is created and attached\n    if (!el.body || !data.target.body) {\n      (el.body ? data.target : el).addEventListener('body-loaded', this.update.bind(this, {}));\n      return;\n    }\n\n    // create the spring if necessary (nonexistent)\n    this.createSpring()\n    // apply new schema to the spring\n    this.updateSpring(oldData)\n  },\n\n  updateSpring: function(oldData) {\n    if (!this.spring) {\n      console.warn(\"Component attempted to change spring before its created. No changes made.\");\n      return;\n    } \n    var data = this.data,\n    spring = this.spring\n    if (!data.target) {\n      console.warn(\"Invalid target specified. No changes made.\");\n      return;\n    }\n    // Cycle through the schema and check if an attribute has changed.\n    // if so, apply it to the spring\n    Object.keys(data).forEach(function(attr) {\n      if (data[attr] !== oldData[attr]) {\n        if (attr === \"target\") {\n          // special case for the target selector\n          spring.bodyB = data.target.body\n          return\n        }\n        spring[attr] = data[attr]\n      }\n    })\n  },\n\n  createSpring: function() {\n    // no need to create a new spring\n    if (this.spring) return\n    var data = this.data\n    if (!this.dataIsValid(data)) return;\n    this.spring = new CANNON.Spring(this.el.body, data.target.body, {\n      restLength: data.restLength,\n      stiffness: data.stiffness,\n      damping: data.damping,\n    });\n    // Compute the force after each step\n    this.world.addEventListener(\"postStep\", this.updateSpringForce.bind(this, {}));\n  },\n\n  // If the spring is valid, update the force each tick the physics are calculated\n  updateSpringForce: function() {\n    if (this.spring) {\n       this.spring.applyForce()\n    }\n  },\n\n  // as for now only check if there is another body to attach\n  dataIsValid: function(data) {\n    if (!data.target) return false\n    return true\n  },\n\n  // resume updating the force when component upon calling play()\n  play: function() {\n    this.world.addEventListener(\"postStep\", this.updateSpringForce.bind(this, {}));\n  },\n\n  // stop updating the force when component upon calling stop()\n  pause: function() {\n    this.world.removeEventListener(\"postStep\", this.updateSpringForce.bind(this, {}));\n  },\n\n  //remove the event listener + delete the spring\n  remove: function() {\n    this.world.removeEventListener(\"postStep\", this.updateSpringForce.bind(this, {}));\n    if (this.spring)\n      delete this.spring\n      this.spring = null\n  }\n})\n"],"names":["AFRAME","Error","CANNON","registerComponent","multiple","schema","target","type","restLength","default","min","stiffness","max","damping","init","this","system","el","sceneEl","systems","physics","world","driver","spring","update","oldData","newData","data","body","createSpring","updateSpring","addEventListener","bind","Object","keys","forEach","attr","bodyB","console","warn","dataIsValid","Spring","updateSpringForce","applyForce","play","pause","removeEventListener","remove"],"mappings":"yBAAA,GAAsB,oBAAXA,OACV,MAAM,IAAIC,MAAM,gEAGjB,GAAsB,oBAAXC,OACV,MAAM,IAAID,MAAM,mFAGjBD,OAAOG,kBAAkB,UAEvBC,UAAU,EAEVC,QAGEC,QAASC,KAAM,YAGfC,YAAaC,QAAS,EAAGC,IAAK,GAG9BC,WAAYF,QAAS,IAAKC,IAAK,EAAGE,IAAK,GAGvCC,SAAUJ,QAAS,EAAGC,IAAK,EAAGE,IAAK,IAGrCE,KAAM,WACJC,KAAKC,OAASD,KAAKE,GAAGC,QAAQC,QAAQC,QACtCL,KAAKM,MAAQN,KAAKC,OAAOM,OAAOD,MAChCN,KAAKQ,OAAmC,MAG1CC,OAAQ,SAASC,EAASC,GACxB,IAAIT,EAAKF,KAAKE,GACdU,EAAOZ,KAAKY,KAGPV,EAAGW,MAASD,EAAKrB,OAAOsB,MAM7Bb,KAAKc,eAELd,KAAKe,aAAaL,KAPfR,EAAGW,KAAOD,EAAKrB,OAASW,GAAIc,iBAAiB,cAAehB,KAAKS,OAAOQ,KAAKjB,WAUlFe,aAAc,SAASL,GACrB,GAAKV,KAAKQ,OAAV,CAIA,IAAII,EAAOZ,KAAKY,KAChBJ,EAASR,KAAKQ,OACTI,EAAKrB,OAMV2B,OAAOC,KAAKP,GAAMQ,QAAQ,SAASC,GACjC,GAAIT,EAAKS,KAAUX,EAAQW,GAAO,CAChC,GAAa,WAATA,EAGF,YADAb,EAAOc,MAAQV,EAAKrB,OAAOsB,MAG7BL,EAAOa,GAAQT,EAAKS,MAZtBE,QAAQC,KAAK,mDANbD,QAAQC,KAAK,8EAuBjBV,aAAc,WAEZ,IAAId,KAAKQ,OAAT,CACA,IAAII,EAAOZ,KAAKY,KACXZ,KAAKyB,YAAYb,KACtBZ,KAAKQ,OAAS,IAAIrB,OAAOuC,OAAO1B,KAAKE,GAAGW,KAAMD,EAAKrB,OAAOsB,MACxDpB,WAAYmB,EAAKnB,WACjBG,UAAWgB,EAAKhB,UAChBE,QAASc,EAAKd,UAGhBE,KAAKM,MAAMU,iBAAiB,WAAYhB,KAAK2B,kBAAkBV,KAAKjB,aAItE2B,kBAAmB,WACb3B,KAAKQ,QACNR,KAAKQ,OAAOoB,cAKjBH,YAAa,SAASb,GACpB,QAAKA,EAAKrB,QAKZsC,KAAM,WACJ7B,KAAKM,MAAMU,iBAAiB,WAAYhB,KAAK2B,kBAAkBV,KAAKjB,WAItE8B,MAAO,WACL9B,KAAKM,MAAMyB,oBAAoB,WAAY/B,KAAK2B,kBAAkBV,KAAKjB,WAIzEgC,OAAQ,WACNhC,KAAKM,MAAMyB,oBAAoB,WAAY/B,KAAK2B,kBAAkBV,KAAKjB,UACnEA,KAAKQ,eACAR,KAAKQ,OACZR,KAAKQ,OAAS"}